#!/bin/sh
# Problem: pkcon sometimes ask to choose between alternatives i686 and x86_64

self="$(basename "$0")"

has(){
  which "$@" >/dev/null 2>/dev/null
}

warn(){
  echo "$@" >&2
}

if has redo-exec && [ -n "$REDO" ]; then
  # Install can start service on some distributions
  # make sure we do this outside of redo
  exec redo-exec "$0" "$@"
fi


apt_file_updated=false
pkg_arg_list=
has_at_least_one=false
mode=and

while [ -n "$1" ]; do
  case $1 in
    --any)
      has_at_least_one=true
      mode=any
      shift
      ;;
    -o|--or|--either)
      mode=or
      shift
      ;;
    -a|--and|--all)
      mode=and
      shift
      ;;
    -p|--package)
      shift
      pkg_arg_list="$pkg_arg_list $1"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

when_not_found(){
  if [ $mode = and ]; then
    warn "$1: package not found"
    exit 1
  fi
}
when_found_f(){
  if [ -n "$2" ]; then
    pkgs="$pkgs '$2'"
  else
    when_not_found "$1"
  fi
}
when_found_p(){
  if [ $1 -eq 0 ]; then
    pkgs="$pkgs '$2'"
  else
    when_not_found "$2"
  fi
}

if has dpkg; then
  if ! has aptitude; then
    apt-get -y install aptitude </dev/null
  fi
  if has aptitude && ! has apt-file; then
    aptitude --no-gui -y install apt-file
  fi
fi

pkgs=

for f in "$@"; do
  if [ -e "$f" ]; then
    has_at_least_one=true
  fi
done

for f in "$@"; do
  if [ $mode = or ] && $has_at_least_one; then
    break
  fi
  if ! [ -e "$f" ]; then
    if has apt-file; then
      if ! $apt_file_updated; then
        apt-file update
        apt_file_updated=true
      fi
      when_found_f "$f" "$( \
        apt-file --package-only -F search "$f" \
          | sort | uniq)"
    elif has pkcon; then
      when_found_f "$f" "$( \
        pkcon -y what-provides -p -y "$f" </dev/null \
          | grep '^Available' \
          | awk '{ print $2 }' \
          | cut -d- -f1 \
          | sort | uniq)"
    else
      warn "$self: Platform not supported, please install PackageKit (pkcon)"
      exit 1
    fi
  fi
done

for p in $pkg_arg_list; do
  if [ $mode = or ] && $has_at_least_one; then
    break
  fi
  if has dpkg; then
    if dpkg -s "$p" </dev/null >/dev/null 2>&1; then
      has_at_least_one=true
      continue
    fi
  fi
  if has aptitude; then
    aptitude --no-gui -y show "$p" >/dev/null 2>&1 </dev/null
    when_found_p $? "$p"
  elif has pkcon; then
    pkcon -y get-details "$p" >/dev/null 2>&1 </dev/null
    when_found_p $? "$p"
  else
    warn "$self: Platform not supported, please install PackageKit (pkcon)"
    exit 1
  fi
done

if [ -n "$(echo $pkgs)" ]; then
  echo "Installing: $pkgs"
  if has aptitude; then
    aptitude update
    aptitude --no-gui -y install $pkgs </dev/null
  elif has pkcon; then
    # Go to empty directory so package name cannot be confused with files
    mkdir /tmp/pkcon-empty
    (
      cd /tmp/pkcon-empty
      pkcon -y install $pkgs </dev/null
    )
    rmdir /tmp/pkcon-empty
  fi
elif ! $has_at_least_one; then
  warn "No package found"
  exit 1
fi

