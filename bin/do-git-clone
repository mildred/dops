#!/bin/bash

: ${DOPS_BIN_DIR:="$(dirname "$(readlink -f "$0")")"}
: ${DOPS_DIR:="$(cd "$DOPS_BIN_DIR/.."; pwd)"}

. "$DOPS_DIR/dopsh_functions.sh"

dopsh-init "$0" "$@"
dopsh-parseopt "H:help -b= --branch=branch -k= --key=sshkey -s= --stamp=stampfile -u= --user= --fail-unchanged url [dir]" "$@" || exit 1

dopsh-opt       branch         HEAD  b
dopsh-opt       fail_unchanged false
dopsh-opt -file key            ""    k
dopsh-opt -file stamp          ""    s
dopsh-opt       user           ""    u
dopsh-opt -file dir            "$(basename "$op_url")"

exitcode=0

wrapgitop=()
deploy_key="$op_key"

if [ -n "$deploy_key" ]; then
  if ! [ -e "$deploy_key" ]; then
    echo "$deploy_key: not found" >&2
    exit 10
  fi
fi

if [ -n "$op_user" ]; then
  wrapgitop+=(sudo -u "$op_user")
  if [ -n "$op_key" ]; then
    deploy_key=$(tempfile) || exit 1
    trap "rm -f -- '$deploy_key'" EXIT
    cp "$op_key" "$deploy_key"
    chown "$op_user" "$deploy_key"
  fi
fi

if [ -n "$deploy_key" ]; then
  if ! which git-ssh-wrapper >/dev/null 2>&1; then
    do-install --gem=git-ssh-wrapper
  fi
  
  wrapgitop+=(git-ssh-wrapper "$deploy_key")
fi

wrapgit(){
  "${wrapgitop[@]}" git "$@"
}

[ 1 = "$REDO_XTRACE" ] && set -x
set -e

if [ -e "$op_dir/.git" ]; then
  cd "$op_dir"
  wrapgit fetch "$op_url" "$op_branch"
  if $op_fail_unchanged && [ "$(git rev-parse HEAD)" = "$(git rev-parse FETCH_HEAD)" ]; then
    exitcode=1
  else
    wrapgit reset --hard FETCH_HEAD
    wrapgit submodule update --init --recursive --force
  fi
elif [ -e "$op_dir" ]; then
  echo "$op_dir: already exists" >&2
  exit 11
else
  if [ HEAD != "$op_branch" ]; then
    wrapgit clone --recursive -b "$op_branch" "$op_url" "$op_dir"
  else
    wrapgit clone --recursive "$op_url" "$op_dir"
  fi
  cd "$op_dir"
fi

if [ -n "$op_stamp" ]; then
  git rev-parse HEAD >"$op_stamp"
fi

exit $exitcode
