#!/bin/bash

#if [ "$DOPS_SHELL" = "stage1" ]; then
#  unset DOPS_SHELL
#else
#  export DOPS_SHELL=stage1
#  export DOPS_DIR="$(cd "$(dirname "$0")"; echo $PWD)"
#  redo-ifchange "$DOPS_DIR/redo-sh"
#  exec "$DOPS_DIR/redo-sh" "$0" "$@"
#fi

exec 4>&1 >&3 3>&4 4>&-

: ${DOPS_DIR:="$(dirname "$(readlink -f "$0")")"}
: ${DOPS_ROOT:="$(cd "$DOPS_DIR/.."; echo $PWD)"}
: ${DOPS_CONF:="$DOPS_ROOT/conf"}
: ${DOPS_MYCONF:="$DOPS_CONF/${PWD##*/}"}

if [ -z "$DOPS_BIN_DIR" ]; then
  export DOPS_BIN_DIR="$DOPS_DIR/bin"
  export PATH="$DOPS_BIN_DIR:$PATH"
fi

warn(){
  if [ "a$1" = "a-n" ]; then
    shift
    printf "$@" >&2
  else
    local templ="$1"
    shift
    printf "$templ\n" "$@" >&2
  fi
}

fail(){
  warn "$@"
  exit 1
}

has(){
  which "$@" >/dev/null 2>&1
}

contains(){
  grep "$@" >/dev/null 2>&1
}

econtains(){
  egrep "$@" >/dev/null 2>&1
}

fcontains(){
  fgrep "$@" >/dev/null 2>&1
}

shquote(){
	local HEAD TAIL="$*"
	printf "'"

	while [ -n "$TAIL" ]; do
		HEAD="${TAIL%%\'*}"

		if [ "$HEAD" = "$TAIL" ]; then
			printf "%s" "$TAIL"
			break
		fi

		printf "%s'\"'\"'" "$HEAD"

		TAIL="${TAIL#*\'}"
	done

	printf "'"
}

redo-cat(){
  redo-ifchange "$@"
  cat "$@"
}

redo-catx(){
  ( set +e
    redo-ifchange "$@"
    local v
    for v in "$@"; do
      if ! [ -e "$v" ]; then
        redo-ifcreate "$v"
      fi
    done
    cat "$@" 2>/dev/null
  )
  return 0
}

redo-source(){
  redo-ifchange "$@"
  while [ $# -gt 0 ]; do
		. "$1"
		shift
	done
}

redo-source-cat(){
  redo-ifchange "$@"
  while [ $# -gt 0 ]; do
		. "$1"
		cat "$1"
		shift
	done
}

# do-record var default-val val
do-record(){
  local val="${3:-"$2"}"
  eval $1='$val'
  printf "%s\n" "$1=$(shquote "$val")"
}

# do-recordf var default-val valfile
do-recordf(){
  do-record "$1" "$2" "$(redo-catx "$3")"
}

# do-recordc var default-val
do-recordc(){
  do-recordf "$1" "$2" "$DOPS_CONF/$(basename "$PWD")/$1"
}

DOPSH_STAMP=false
redo-always-stamp(){
  redo-always
  DOPSH_STAMP=true
}

do_file="$1"
shift

(
  [ -n "$REDO_XTRACE" ] && set -x
  [ -n "$REDO_VERBOSE" ] && set -v
  set -e
  source "$do_file"
)
res=$?

if $DOPSH_STAMP; then
  redo-stamp <"$3"
fi

exit $res
