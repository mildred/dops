How to Create a Provisionning Repository?
=========================================

- Create a git repository with dops as a git submodule.
- link the dops shell in: `ln -s dops/dopsh .`
- reate a redo `provision.do` script that does the provisionning job

Your redo scripts are encouraged to start with `#!.../dopsh` to enable the dops
shell, that shell contain many useful [documented features](README.DOPSH)

You can also include a number of other git submodules corresponding to the
different things you want to provision, and call them from the master
`provision.do` script.


How to bootstrap a node?
========================

You need ssh access on the remote node. Then on the provisionning repository
and assuming the dops submodule is located in `dops`, run:

    dops/bootstrap-ssh.sh GIT_REMOTE [SSH_HOST REMOTE_DIR]

`GIT_REMOTE` is the name of a git remote corresponding to the node to
bootstrap. If the remote already exists, the next parameters will be fetched
from the git configuration.

If the remote doesn't already exists or you provided the three parameters, the
script will create the remote and bootstrap the node `SSH_HOST`, creating a
repository `REMOTE_DIR` on the remote host.

This command will not provision the node, it will just bootstrap it to make it
ready for provisionning. Not it is better to have a public key authentication.

Example of command:

    dops/bootstrap-ssh.sh staging root@staging.example.net /root/provisionning


How to provision a node from my developpment machine?
=====================================================

Just push to the node, it should be registered as a git remote. The bootstrap
should have created a hook that will provision the node when the repository is
pushed to.

The bootstrap should also have created a git alias `git cipush` that pushes a
temporary commit that includes the staging area. It is useful to provision a
work in progress without creating a commit. See `git cipush -h`


How to provision from the remote node?
======================================

Go to the provisionning repository (`REMOTE_DIR`), optionally pull any changes
and run:

    redo provision


What environment variables can I use with the dopsh shell?
==========================================================

  - `DOPS_DIR`:
    Location of the dops directory

  - `DOPS_ROOT`:
    Location of the provisionning repository (`DOPS_DIR/..`)

  - `DOPS_CONF`:
    Location of the configuration directory for your provisionning
    (`DOPS_ROOT/conf`)


What is dopsh?
==============

`dopsh` is a bash shell (so you don't have to care about compatibility between
different shells) that have special variables and functions that are very
useful.


What functions and executables come with the dopsh shell?
=========================================================

  - `warn [-n]`:
    `printf` to stdout

  - `fail [-n]`:
    Terminate

  - `has`:
    `which` with no output

  - `[ef]contains`:
    `[ef]grep` with no output

  - `shquote`:
    quote its argument so it can be read safely from the shell

  - `redo-cat[x]`:
    `redo` a file and `cat` it afterwards, `catx` if you don't care about the file existance

  - `redo-source`:
    `redo` a file and source it afterwards

  - `redo-source-cat`:
    `redo` a file, source it and `cat` it afterwards

  - `do-record VAR DEFVAL VAL`

  - `do-recordf VAR DEFVAL FILE`

  - `do-recordc VAR DEFVAL`


What tools do I have for provisionning?
=======================================

  - `do-install-file`:
    Declare wanted files or packages

  - `do-passwd`:
    Declare system users

