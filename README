How to Create a Provisionning Repository?
=========================================

- Create a git repository with dops as a git submodule.
- link the dops shell in: `ln -s dops/dopsh .`
- Create a redo `provision.do` script that does the provisionning job
- Create a `conf` directory containing the configuration for your recipes

Your redo scripts are encouraged to start with `#!.../dopsh` to enable the dops
shell, that shell contain many useful [documented features](README.DOPSH)

You can also include a number of other git submodules corresponding to the
different things you want to provision, and call them from the master
`provision.do` script.


How to bootstrap a node?
========================

## From SSH Access

You need ssh access on the remote node. Then on the provisionning repository
and assuming the dops submodule is located in `dops`, run:

    dops/bootstrap-ssh.sh GIT_REMOTE [SSH_HOST REMOTE_DIR]

`GIT_REMOTE` is the name of a git remote corresponding to the node to
bootstrap. If the remote already exists, the next parameters will be fetched
from the git configuration.

If the remote doesn't already exists or you provided the three parameters, the
script will create the remote and bootstrap the node `SSH_HOST`, creating a
repository `REMOTE_DIR` on the remote host.

This command will not provision the node, it will just bootstrap it to make it
ready for provisionning. Not it is better to have a public key authentication.

Example of command:

    dops/bootstrap-ssh.sh staging root@staging.example.net /root/provisionning

## Manually

Get the repository on the machine in any way possible, and get a shell. On the
repository, put the node id in `$GIT_DIR/info/dops_node_id` (or specify it in
the `-n` option in `bootstrap-self.sh`).

To bootstrap the base dependencies, run:

    dops/bootstrap-self.sh [-n NODE_ID]

Then, run the provisionning by executing:

    redo provision

You can run the two steps at once by giving the `bootstrap-self.sh` as argument
the path to the provisionning directory, it will then automatically run redo in
it. To use another target than `provision`, you can specify it on the command
line after the provisionning directory.


How to provision a node from my developpment machine?
=====================================================

Just push to the node, it should be registered as a git remote. The bootstrap
should have created a hook that will provision the node when the repository is
pushed to.

The bootstrap should also have created a git alias `git cipush` that pushes a
temporary commit that includes the staging area. It is useful to provision a
work in progress without creating a commit. See `git cipush -h`

To setup the `cipush` alias, run

    dops/setup-git.sh

The most useful way to use `cipush` is:

    git cipush [-a] REMOTE HEAD


How to provision from the remote node?
======================================

Go to the provisionning repository (`REMOTE_DIR`), optionally pull any changes
and run:

    redo provision


How to organize the provisionning repository
============================================

The repository is organized in directories, and there are three kinds of them:

- The `dops` submodule: Contains dopsh and other useful things documented below

- Recipe directories (they can be submodule also): these contain `.do` files
  used to declare how to provision the resource. The `provision.do` is by
  convention the default entry point, although there is no code envorcing that.
  
  Look at the redo documentation for more information on how to write these
  `.do` files. To briefly explain it, they are shell scripts, with specials
  commands enabled (through the `$PATH`) to declare dependencies between
  recipes.

- The `conf` directory containing the specific configuration to your
  provisionning. No distinction is made on specific configuration for a node,
  and configuration for the whole provisionning repository. Recipes are
  expected to choose configuration keys depending on `$DOPS_NODE_ID` when
  appropriate.


How to write a recipe
=====================

Create a directory for this recipe, and create the `provision.do` file
containing as first line:

    #!.../dopsh
    redo-source config

This will tell redo to use the `dopsh` shell. It is a bash shell with
additional environment variables and functions. It also tell to source the
result of the `config.do` recipe.

Create a `config.do` file containing the configuration, looking like:

    #!.../dopsh
    exec >$3 # redirects the stdout to the result of this recipe
    
    do-recordc varname defaultval
    do-recordc varname defaultval
    ...

This will create a `config` file (the file that is going to be sourced)
containing the variables you declared. The file `$DOPS_MYCONF/$varname` will
be looked, and if the file exists, its content will replace the default value
for the variable.

If you want to provide tools to other recipes, you can use shell scripts to do
so. Look for example at the apache2 recipe, that include an `enable-site` tool.
For the shell scripts, you can use the following template:

    #!/usr/bin/env dopsh
    # (dopsh in in PATH)
    
    dopsh-init "$0" "$@"
    dopsh-parseopt "H:help --op1 --op2=" "$@" || exit 1

`dopsh-init` will put you in the same directory as the script, and will set
`DOPSH_CALL_DIR` to the old current directory. Then, `dopsh-parseopt` will
parse options given to the script. Look at the files in the `bin` directory for
more information on how to use these functions.


What environment variables can I use with the dopsh shell?
==========================================================

  - `DOPS_DIR`:
    Location of the dops directory

  - `DOPS_ROOT`:
    Location of the provisionning repository (`$DOPS_DIR/..`)

  - `DOPS_CONF`:
    Location of the configuration directory for your provisionning
    (`$DOPS_ROOT/conf`)

  - `DOPS_MYCONF`:
    Location of the configuration directory for your recipe
    (`$DOPS_CONF/$(dirname $PWD)`)

  - `DOPS_NODE_ID`:
    Node ID, set up during bootstrap.


What is dopsh?
==============

`dopsh` is a bash shell (so you don't have to care about compatibility between
different shells) that have special variables and functions that are very
useful.


What functions and executables come with the dopsh shell?
=========================================================

Basic utilities:

  - `warn [-n]`:    `printf` to stdout
  - `fail [-n]`:    `printf` to stderr and return with code 1
  - `has`:          `which` with no output
  - `[ef]contains`: `[ef]grep` with no output
  - `abspath`:      Transform a path to an absolute path
  - `shquote`:      Quote its argument so it can be read safely from the shell
  - `not`:          Print true when given false and false when given true

Redo extensions:

  - `redo-cat[x]`:
    `redo` a file and `cat` it afterwards, `catx` if you don't care about the
    file existance

  - `redo-source`:
    `redo` a file and source it afterwards

  - `redo-source-cat`:
    `redo` a file, source it and `cat` it afterwards

  - `redo-always-stamp [FILE|-]`:
    `redo-always` with `redo-stamp` (put this after FILE which defaults to $3
    has been written)

For shell scripts:

  - `dopsh-init "$0" "$@"`: set `DOPSH_ARG0` and `DOPSH_ARGS`

  - `dopsh-parseopt TEMPLATE "$@"`: parse options according to `TEMPLATE`. It
    can use `DOPSH_ARG0` and `DOPSH_ARGS` to print help.
    
  - `dopsh-opt`: Declare options after `dopsh-parseopt`

For provisionning scripts:

  - `do-provision MODULE1 MODULE2`:
    Equivalent to `redo MODULE1/provision MODULE2/provision`

  - `do-conf [--shell] VAR VALSPEC...`: set the variable `VAR`, optionally
    printing shell code to set it (if `--shell` is specified). `VALSPEC` is used
    to determine the variable value, taking the first and going to the last in
    this order, stopping when the value has been set (not empty).
    
    `VALSPEC` can be one of:
    
    - `v=VALUE`: set the variable if `VALUE` is not empty
    - `f=FILE`:  set the variable to the content of `FILE` if it exists
    - `c=FILE`:  set the variable to the content of `DOPSH_MYCONF/FILE` if it
       exists
    - `C=FILE`:  set the variable to the content of `DOPSH_CONF/FILE` if it
       exists
    - `bf=FILE`: set the variable to `true` if `FILE` exists
    - `bc=FILE`: set the variable to `true` if `DOPSH_MYCONF/FILE` exists
    - `bC=FILE`: set the variable to `true` if `DOPSH_CONF/FILE` exists
    - `Bf=FILE`: set the variable to `false` if `FILE` exists
    - `Bc=FILE`: set the variable to `false` if `DOPSH_MYCONF/FILE` exists
    - `BC=FILE`: set the variable to `false` if `DOPSH_CONF/FILE` exists

The source of these functions is in `dopsh_functions.sh`. It can contain more
documentation in the form of comments

There are also deprecated functions:

  - `do-record [-q] VAR DEFVAL VAL`: deprecarted, use `do-conf [--shell] VAR v=VAL v=DEFVAL`

  - `do-recordf [-q] VAR DEFVAL FILE`: deprecarted, use `do-conf [--shell] VAR f=FILE v=DEFVAL`

  - `do-recordc [-q] VAR DEFVAL`: deprecarted, use `do-conf [--shell] VAR c=VAR v=DEFVAL`

  - `do-getconf VAR DEFVAL` is an alias for `do-recordc -q`, please use `do-conf` instead

What tools do I have for provisionning?
=======================================

These are not implemented as functions but as scripts in the `bin` directory:

  - `do-install`:
    Declare wanted files or packages

  - `do-install-file`: deprecated in favor of `do-install`

  - `do-passwd`:
    Declare system users

  - `do-git-clone REPO PATH`:
    Clone or update repository

How can I configure Vagrant for provisionning with dops?
========================================================

You need to have the provisionning as a shared folder. Then set the
provisionning command to `dops/bootstrap-self.sh`. For example:

    config.vm.share_folder "v-dops", "/provisionning", "."
    config.vm.provision :shell, :inline => "/provisionning/dops/bootstrap-self.sh /provisionning"

There is an issue with redo on virtual folders. Redo store the inode number of
the files it generates, and if the inode number changes, then it thinks the file
has been modified manually, and refuses by default to overwrite files. Because
virtual volders involves a virtual file system with brand new inodes, redo
doesn't work well if invoked from both the host and the guest.

Basically, you should only call redo from within the virtual machine.
